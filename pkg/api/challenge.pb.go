// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: challenge.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_challenge_proto_rawDescGZIP(), []int{0}
}

func (x *Link) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type Timer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Seconds   int64  `protobuf:"varint,2,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Frequency int64  `protobuf:"varint,3,opt,name=frequency,proto3" json:"frequency,omitempty"`
}

func (x *Timer) Reset() {
	*x = Timer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timer) ProtoMessage() {}

func (x *Timer) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timer.ProtoReflect.Descriptor instead.
func (*Timer) Descriptor() ([]byte, []int) {
	return file_challenge_proto_rawDescGZIP(), []int{1}
}

func (x *Timer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Timer) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timer) GetFrequency() int64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

type Placeholder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Placeholder) Reset() {
	*x = Placeholder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_challenge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Placeholder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Placeholder) ProtoMessage() {}

func (x *Placeholder) ProtoReflect() protoreflect.Message {
	mi := &file_challenge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Placeholder.ProtoReflect.Descriptor instead.
func (*Placeholder) Descriptor() ([]byte, []int) {
	return file_challenge_proto_rawDescGZIP(), []int{2}
}

func (x *Placeholder) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_challenge_proto protoreflect.FileDescriptor

var file_challenge_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0x1a, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x53, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x21, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x95, 0x01, 0x0a, 0x10, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x25, 0x0a, 0x0d, 0x4d, 0x61, 0x6b, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x09, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x1a, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x30, 0x01, 0x12, 0x32,
	0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x1a, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_challenge_proto_rawDescOnce sync.Once
	file_challenge_proto_rawDescData = file_challenge_proto_rawDesc
)

func file_challenge_proto_rawDescGZIP() []byte {
	file_challenge_proto_rawDescOnce.Do(func() {
		file_challenge_proto_rawDescData = protoimpl.X.CompressGZIP(file_challenge_proto_rawDescData)
	})
	return file_challenge_proto_rawDescData
}

var file_challenge_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_challenge_proto_goTypes = []interface{}{
	(*Link)(nil),        // 0: api.Link
	(*Timer)(nil),       // 1: api.Timer
	(*Placeholder)(nil), // 2: api.Placeholder
}
var file_challenge_proto_depIdxs = []int32{
	0, // 0: api.ChallengeService.MakeShortLink:input_type -> api.Link
	1, // 1: api.ChallengeService.StartTimer:input_type -> api.Timer
	2, // 2: api.ChallengeService.ReadMetadata:input_type -> api.Placeholder
	0, // 3: api.ChallengeService.MakeShortLink:output_type -> api.Link
	1, // 4: api.ChallengeService.StartTimer:output_type -> api.Timer
	2, // 5: api.ChallengeService.ReadMetadata:output_type -> api.Placeholder
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_challenge_proto_init() }
func file_challenge_proto_init() {
	if File_challenge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_challenge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_challenge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Placeholder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_challenge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_challenge_proto_goTypes,
		DependencyIndexes: file_challenge_proto_depIdxs,
		MessageInfos:      file_challenge_proto_msgTypes,
	}.Build()
	File_challenge_proto = out.File
	file_challenge_proto_rawDesc = nil
	file_challenge_proto_goTypes = nil
	file_challenge_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChallengeServiceClient is the client API for ChallengeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChallengeServiceClient interface {
	MakeShortLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Link, error)
	StartTimer(ctx context.Context, in *Timer, opts ...grpc.CallOption) (ChallengeService_StartTimerClient, error)
	ReadMetadata(ctx context.Context, in *Placeholder, opts ...grpc.CallOption) (*Placeholder, error)
}

type challengeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChallengeServiceClient(cc grpc.ClientConnInterface) ChallengeServiceClient {
	return &challengeServiceClient{cc}
}

func (c *challengeServiceClient) MakeShortLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Link, error) {
	out := new(Link)
	err := c.cc.Invoke(ctx, "/api.ChallengeService/MakeShortLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) StartTimer(ctx context.Context, in *Timer, opts ...grpc.CallOption) (ChallengeService_StartTimerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChallengeService_serviceDesc.Streams[0], "/api.ChallengeService/StartTimer", opts...)
	if err != nil {
		return nil, err
	}
	x := &challengeServiceStartTimerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChallengeService_StartTimerClient interface {
	Recv() (*Timer, error)
	grpc.ClientStream
}

type challengeServiceStartTimerClient struct {
	grpc.ClientStream
}

func (x *challengeServiceStartTimerClient) Recv() (*Timer, error) {
	m := new(Timer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *challengeServiceClient) ReadMetadata(ctx context.Context, in *Placeholder, opts ...grpc.CallOption) (*Placeholder, error) {
	out := new(Placeholder)
	err := c.cc.Invoke(ctx, "/api.ChallengeService/ReadMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChallengeServiceServer is the server API for ChallengeService service.
type ChallengeServiceServer interface {
	MakeShortLink(context.Context, *Link) (*Link, error)
	StartTimer(*Timer, ChallengeService_StartTimerServer) error
	ReadMetadata(context.Context, *Placeholder) (*Placeholder, error)
}

// UnimplementedChallengeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChallengeServiceServer struct {
}

func (*UnimplementedChallengeServiceServer) MakeShortLink(context.Context, *Link) (*Link, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeShortLink not implemented")
}
func (*UnimplementedChallengeServiceServer) StartTimer(*Timer, ChallengeService_StartTimerServer) error {
	return status.Errorf(codes.Unimplemented, "method StartTimer not implemented")
}
func (*UnimplementedChallengeServiceServer) ReadMetadata(context.Context, *Placeholder) (*Placeholder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMetadata not implemented")
}

func RegisterChallengeServiceServer(s *grpc.Server, srv ChallengeServiceServer) {
	s.RegisterService(&_ChallengeService_serviceDesc, srv)
}

func _ChallengeService_MakeShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).MakeShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChallengeService/MakeShortLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).MakeShortLink(ctx, req.(*Link))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_StartTimer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Timer)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChallengeServiceServer).StartTimer(m, &challengeServiceStartTimerServer{stream})
}

type ChallengeService_StartTimerServer interface {
	Send(*Timer) error
	grpc.ServerStream
}

type challengeServiceStartTimerServer struct {
	grpc.ServerStream
}

func (x *challengeServiceStartTimerServer) Send(m *Timer) error {
	return x.ServerStream.SendMsg(m)
}

func _ChallengeService_ReadMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Placeholder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).ReadMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChallengeService/ReadMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).ReadMetadata(ctx, req.(*Placeholder))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChallengeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ChallengeService",
	HandlerType: (*ChallengeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeShortLink",
			Handler:    _ChallengeService_MakeShortLink_Handler,
		},
		{
			MethodName: "ReadMetadata",
			Handler:    _ChallengeService_ReadMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartTimer",
			Handler:       _ChallengeService_StartTimer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "challenge.proto",
}
